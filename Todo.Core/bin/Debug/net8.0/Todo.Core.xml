<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Todo.Core</name>
    </assembly>
    <members>
        <member name="T:Todo.Core.Entities.Task">
            <summary>
                The entity that represents a task in the database.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.Id">
            <summary>
                The unique identifier for the task entity, the primary key,
                required, auto-generated, and a GUID (Globally Unique Identifier).
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.Name">
            <summary>
                The name of the task, required, and a string with a maximum length of 100 characters.
                The minimum length is 1 character.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.Description">
            <summary>
                The description of the task, a string with a maximum length of 500 characters.
                The description is optional and can be null.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.IsCompleted">
            <summary>
                The flag that indicates if the task is completed or not.
                The default value is false, and it is required.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.DueDate">
            <summary>
               The due date of the task, optional, and can be null.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.Priority">
            <summary>
                The priority of the task, optional, and can be null.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.ListId">
            <summary>
                The unique identifier of the task list that the task belongs to.
                The foreign key is required and can be null.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.Task.TaskList">
            <summary>
                The navigation property to the task list that the task belongs to.
                The task list is optional and can be null.
                The property is not serialized in the JSON response.
                The property is not mapped to the database.
            </summary>
        </member>
        <member name="T:Todo.Core.Entities.TaskList">
            <summary>
                Represents a list of tasks that a user can create.
                A list can have many tasks.
                A list belongs to a user.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.TaskList.Id">
            <summary>
                The unique identifier of the list of tasks, autogenerated, and not null.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.TaskList.Name">
            <summary>
                The name of the list of tasks, required, and not null.
                The name must be between 1 and 100 characters.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.TaskList.Description">
            <summary>
                The description of the list of tasks, not required, and can be null.
                The description must not exceed 200 characters.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.TaskList.Tasks">
            <summary>
                The list of tasks that belong to the list of tasks, required, and not null.
                A list can have many tasks.
                The list of tasks is initialized as an empty list.
                The list of tasks is not lazy-loaded, and the tasks are eagerly-loaded.
                The list is not mapped to the database.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.TaskList.UserId">
            <summary>
                The user that the list of tasks belongs to, not required, and can be null.
                A list belongs to a user.
            </summary>
        </member>
        <member name="T:Todo.Core.Entities.User">
            <summary>
                Represents a user in the application with a unique Id, Email, and Password.
                A user has a first and last name, and a list of TaskLists.
                Inherits from IdentityUser, which provides the Id, Email, and Password properties.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.FirstName">
            <summary>
                The first name of the user.
                Required, must be between 3 and 25 characters.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.LastName">
            <summary>
                The last name of the user.
                Required, must be between 3 and 25 characters.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.Name">
            <summary>
                The full name of the user.
                Computed property that returns the concatenation of the first and last name.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.Lists">
            <summary>
                The list of TaskLists that the user has.
                A user can have multiple TaskLists.
                A TaskList can only belong to one user.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.RefreshToken">
            <summary>
                The refresh token of the user.
                Used for refreshing the access token.
            </summary>
        </member>
        <member name="P:Todo.Core.Entities.User.RefreshTokenExpirationDate">
            <summary>
                The expiration date of the refresh token.
                Used for checking if the refresh token is expired.
            </summary>
        </member>
        <member name="T:Todo.Core.Enums.TaskPriority">
            <summary>
                Represents the priority of a task.
            </summary>
        </member>
        <member name="F:Todo.Core.Enums.TaskPriority.Urgent">
            <summary>
                Represents the highest priority.
            </summary>
        </member>
        <member name="F:Todo.Core.Enums.TaskPriority.High">
            <summary>
                Represents a high priority.
            </summary>
        </member>
        <member name="F:Todo.Core.Enums.TaskPriority.Medium">
            <summary>
                Represents a medium priority.
            </summary>
        </member>
        <member name="F:Todo.Core.Enums.TaskPriority.Low">
            <summary>
                Represents a low priority.
            </summary>
        </member>
        <member name="T:Todo.Core.Exceptions.AddRoleException">
            <summary>
                Exception thrown when a role is not added to the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.AddRoleException.#ctor(System.String)">
            <summary>
                Exception thrown when a role is not added to the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.InvalidModelStateException">
            <summary>
                Exception thrown when the Model State is invalid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.InvalidModelStateException.#ctor(System.String)">
            <summary>
                Exception thrown when the Model State is invalid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.InvalidTokenException">
            <summary>
                Exception thrown when the token is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.InvalidTokenException.#ctor(System.String)">
            <summary>
                Exception thrown when the token is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.CreateUserException">
            <summary>
                Exception thrown when a user is not added to the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.CreateUserException.#ctor(System.String)">
            <summary>
                Exception thrown when a user is not added to the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.InvalidEmailException">
            <summary>
                Exception thrown when the email is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.InvalidEmailException.#ctor(System.String)">
            <summary>
                Exception thrown when the email is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.InvalidGuidException">
            <summary>
                Exception thrown when the id guid is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.InvalidGuidException.#ctor(System.String)">
            <summary>
                Exception thrown when the id guid is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.InvalidPasswordException">
            <summary>
                Exception thrown when the password is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.InvalidPasswordException.#ctor(System.String)">
            <summary>
                Exception thrown when the password is not valid.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.ListNotFoundException">
            <summary>
                Exception thrown when the list is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.ListNotFoundException.#ctor(System.String)">
            <summary>
                Exception thrown when the list is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.PasswordDidNotChangeException">
            <summary>
                Exception thrown when the password is did not change.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.PasswordDidNotChangeException.#ctor(System.String)">
            <summary>
                Exception thrown when the password is did not change.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.TaskNotFoundException">
            <summary>
                Exception thrown when the task is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.TaskNotFoundException.#ctor(System.String)">
            <summary>
                Exception thrown when the task is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.UserInformationDidNotUpdateException">
            <summary>
                Exception thrown when the user information is not updated in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.UserInformationDidNotUpdateException.#ctor(System.String)">
            <summary>
                Exception thrown when the user information is not updated in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Exceptions.UserNotFoundException">
            <summary>
                Exception thrown when the user is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="M:Todo.Core.Exceptions.UserNotFoundException.#ctor(System.String)">
            <summary>
                Exception thrown when the user is not found in the database.
            </summary>
            <param name="message">
                The message to display when the exception is thrown.
            </param>
        </member>
        <member name="T:Todo.Core.Interfaces.IAccountService">
            <summary>
                IAccountService interface is used to manage user operations like get user information,
                changing password, updating user information etc.
            </summary>
        </member>
        <member name="M:Todo.Core.Interfaces.IAccountService.GetUserById(System.String)">
            <summary>
               GetUserById method is used to get user by id.
            </summary>
            <param name="userId">
                The id of the user to get.
            </param>
            <returns>
                Returns the user with the provided id.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IAccountService.GetUserByClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                GetUserByClaims method is used to get user by claims.
            </summary>
            <param name="claims">
                ClaimsPrincipal instance that contains user's claims.
            </param>
            <returns>
                Returns the user with the provided claims.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IAccountService.ChangePassword(Todo.Core.DTOs.AccountDTOs.ChangePasswordDto)">
            <summary>
                ChangePassword method is used to change user's password.
            </summary>
            <param name="changePasswordDto">
                ChangePasswordDto instance that contains user's id, current password and new password.
            </param>
            <returns>
                Returns true if password changed successfully.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IAccountService.UpdateUserInfo(Todo.Core.DTOs.AccountDTOs.UpdateUserInfoDto)">
            <summary>
                UpdateUserInfo method is used to update user's information like first name, last name, email, username, and phone number.
                It updates only the provided properties and keeps the others as they are if they are not provided (null or empty).
                It does not update the password, to update the password use ChangePassword method.
                And it does not update the user's id.
            </summary>
            <param name="updateUserInfoDto">
                UpdateUserInfoDto instance that contains user's id and new information.
                New information can be new first name, new last name, new email, new username, and new phone number.
            </param>
            <returns>
                Returns true if user information updated successfully.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IAccountService.DeleteAccount(System.String)">
            <summary>
                DeleteAccount method is used to delete the user account by id.
            </summary>
            <param name="id">
                The id of the user to delete the account.
            </param>
            <returns>
                Returns true if the account deleted successfully.
            </returns>
        </member>
        <member name="T:Todo.Core.Interfaces.IRepository`3">
            <summary>
                Interface for the repository pattern.
                This interface is used to define the methods that will be implemented in the repository classes.
                The repository pattern is used to separate the logic that retrieves the data from the database from the business logic.
            </summary>
            <typeparam name="TEntity">
                This entity will be the model that will be used to interact with the database.
            </typeparam>
            <typeparam name="TAddDto">
                This DTO will be used to validate the data that will be added to the database.
            </typeparam>
            <typeparam name="TUpdateDto">
                This DTO will be used to validate the data that will be updated in the database.
            </typeparam>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.GetAllAsync(System.String)">
            <summary>
                This method will return all the entities from the database.
            </summary>
            <param name="id">
                This parameter will be used to filter the entities by a specific id.
            </param>
            <returns>
                A Task that will return an IEnumerable of TEntity.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.GetByIdAsync(System.Guid)">
            <summary>
                This method will return a specific entity from the database based on the id.
            </summary>
            <param name="id">
                This parameter will be used to filter the entity by a specific id.
            </param>
            <returns>
                A Task that will return a TEntity.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.AddAsync(`1)">
            <summary>
                This method will add a new entity to the database.
            </summary>
            <param name="entity">
                This parameter will be used to add a new entity to the database.
            </param>
            <returns>
                A Task that will return the added TEntity.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.UpdateAsync(`2)">
            <summary>
                This method will update an entity in the database.
            </summary>
            <param name="entity">
                This parameter will be used to update an entity in the database.
            </param>
            <returns>
                A Task that will return the updated TEntity.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.UpdateEntity(`0,`2)">
            <summary>
                This method will update an entity with the data from the DTO.
            </summary>
            <param name="entity">
                This parameter will be used to update an entity in the database.
            </param>
            <param name="dto">
                This parameter will be used to update the entity with the data from the DTO.
            </param>
            <returns>
                The updated TEntity.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.IRepository`3.DeleteAsync(System.Guid)">
            <summary>
                This method will delete an entity from the database.
                The entity will be deleted based on the id.
            </summary>
            <param name="id">
                This parameter will be used to delete an entity from the database.
            </param>
            <returns>
                A Task that will return nothing.
            </returns>
        </member>
        <member name="T:Todo.Core.Interfaces.ITokenService">
            <summary>
                Interface for TokenService class.
            </summary>
        </member>
        <member name="M:Todo.Core.Interfaces.ITokenService.GenerateToken(Todo.Core.Entities.User)">
            <summary>
                Generates a token for a user based on the user's information.
            </summary>
            <param name="user">
                The user to generate a token for.
            </param>
            <returns>
                The generated token.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.ITokenService.GetSecretKey">
            <summary>
                Gets the secret key for the token.
            </summary>
            <returns>
                The secret key for the token.
            </returns>
        </member>
        <member name="M:Todo.Core.Interfaces.ITokenService.GetTokenExpirationDays">
            <summary>
                Gets the number of days until the token expires.
            </summary>
            <returns>
                The number of days until the token expires.
            </returns>
        </member>
    </members>
</doc>
